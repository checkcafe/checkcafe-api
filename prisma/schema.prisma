// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(128)
  email     String   @unique @db.VarChar(128)
  username  String   @unique @db.VarChar(32)
  password  String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role        Role         @relation(fields: [roleId], references: [id])
  tokens      UserToken[]  @relation("UserTokens")
  cafeReviews CafeReview[]
  cafes       Cafe[]

  @@index([roleId])
  @@map("users")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(64)
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Role?  @relation("RoleHierarchy", fields: [parentId], references: [id])
  children Role[] @relation("RoleHierarchy")
  users    User[]

  @@map("roles")
}

model UserToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user User @relation("UserTokens", fields: [userId], references: [id])

  @@index([userId, token])
  @@map("user_tokens")
}

model Country {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  states State[]

  @@map("countries")
}

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country Country @relation(fields: [countryId], references: [id])
  cities  City[]

  @@map("states")
}

model City {
  id        String   @id @default(cuid())
  name      String   @unique
  stateId   String
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state State  @relation(fields: [stateId], references: [id])
  cafes Cafe[]

  @@map("cities")
}

model Cafe {
  id            String   @id @default(cuid())
  cityId        String
  userId        String
  name          String
  description   String?
  latitude      Float?
  longitude     Float?
  streetAddress String   @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  city           City            @relation(fields: [cityId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  operatingHours OperatingHour[]
  cafeFeatures   CafeFeature[]
  cafePhotos     CafePhoto[]
  cafeReviews    CafeReview[]

  @@map("cafes")
}

model CafePhoto {
  id            String   @id @default(cuid())
  cafeId        String
  cafeFeatureId String?
  url           String
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cafe        Cafe         @relation(fields: [cafeId], references: [id])
  cafeFeature CafeFeature? @relation(fields: [cafeFeatureId], references: [id])

  @@index([cafeId, order])
  @@map("cafe_photos")
}

model OperatingHour {
  id        String   @id @default(cuid())
  cafeId    String
  day       Day
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cafe Cafe @relation(fields: [cafeId], references: [id])

  @@map("operating_hours")
}

model FeatureCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  features Feature[]

  @@map("feature_categories")
}

model Feature {
  id                String   @id @default(cuid())
  featureCategoryId String?
  name              String   @unique
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  featureCategory FeatureCategory? @relation(fields: [featureCategoryId], references: [id])
  cafeFeatures    CafeFeature[]

  @@map("features")
}

model CafeFeature {
  id          String   @id @default(cuid())
  featureId   String
  cafeId      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feature    Feature     @relation(fields: [featureId], references: [id])
  cafe       Cafe        @relation(fields: [cafeId], references: [id])
  cafePhotos CafePhoto[]

  @@map("cafe_features")
}

model CafeReview {
  id        String   @id @default(cuid())
  cafeId    String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cafe Cafe @relation(fields: [cafeId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("cafe_reviews")
}
