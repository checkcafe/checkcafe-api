// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  name      String  @db.VarChar(128)
  email     String  @unique @db.VarChar(128)
  username  String  @unique @db.VarChar(32)
  password  String
  avatarUrl String?

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  tokens        UserToken[]     @relation("UserTokens")
  places        Place[]
  placeReviews  PlaceReview[]
  PlaceFavorite PlaceFavorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roleId])
  @@map("users")
}

model Role {
  id   String @id @default(cuid())
  name String @unique @db.VarChar(64)

  parentId String?
  parent   Role?   @relation("RoleHierarchy", fields: [parentId], references: [id])

  children Role[] @relation("RoleHierarchy")
  users    User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model UserToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)

  user User @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, token])
  @@map("user_tokens")
}

model Country {
  id       String  @id @default(cuid())
  name     String  @unique
  code     String  @unique
  currency String?

  state State[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("countries")
}

model State {
  id   String @id @default(cuid())
  name String @unique

  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  city City[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("states")
}

model City {
  id        String @id @default(cuid())
  name      String @unique
  latitude  Float?
  longitude Float?

  stateId String
  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade)

  place Place[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cities")
}

model Place {
  id            String  @id @default(cuid())
  name          String  @unique @db.VarChar(255)
  slug          String  @unique @db.VarChar(128)
  description   String?
  streetAddress String  @db.VarChar(255)
  priceRange    String?
  latitude      Float?
  longitude     Float?
  isPublished   Boolean @default(false)

  cityId String?
  city   City?   @relation(fields: [cityId], references: [id])
  userId String
  user   User    @relation(fields: [userId], references: [id])

  operatingHours  OperatingHour[]
  placeFacilities PlaceFacility[]
  placePhotos     PlacePhoto[]
  PlaceFavorite   PlaceFavorite[]
  placeReviews    PlaceReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("places")
}

model OperatingHour {
  id          String   @id @default(cuid())
  day         String
  openingTime DateTime @db.Time()
  closingTime DateTime @db.Time()

  placeId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([placeId, day])
  @@map("operating_hours")
}

model FacilityCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  facilities Facility[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("facility_categories")
}

model Facility {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  facilityCategoryId String?
  facilityCategory   FacilityCategory? @relation(fields: [facilityCategoryId], references: [id], onDelete: Cascade)

  placeFacilities PlaceFacility[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("facilities")
}

model PlaceFacility {
  id          String  @id @default(cuid())
  description String?

  facilityId String
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  placeId    String
  place      Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([placeId, facilityId])
  @@map("place_facilities")
}

model PlacePhoto {
  id    String @id @default(cuid())
  url   String
  order Int    @default(0)

  placeId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([placeId, order])
  @@map("place_photos")
}

model PlaceFavorite {
  id String @id @default(cuid())

  placeId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, placeId])
  @@map("place_favorites")
}

model PlaceReview {
  id      String  @id @default(cuid())
  comment String?

  placeId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  PlaceReviewPhoto PlaceReviewPhoto[] @relation()

  @@map("place_reviews")
}

model PlaceReviewPhoto {
  id    String @id @default(cuid())
  url   String
  order Int    @default(0)

  placeReviewId String
  placeReview   PlaceReview @relation(fields: [placeReviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([placeReviewId, order])
  @@map("place_review_photos")
}
